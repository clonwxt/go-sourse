package main

import (
	"fmt"
	"unsafe"
)

func main() {
	s1 := "1"       // int64 + int64  16B 16 *8
	var i1 int8 = 1 // 1B   0000 0001   8
	//     0 1  我不需要表示>1   1/8 Byte
	fmt.Println(unsafe.Sizeof(s1))
	fmt.Println(unsafe.Sizeof(i1))

	// 1 <int8>  方便举例使用
	// 0000 0001  原码
	// 1111 1110  反码
	// 0000 0001  补码:    源码 --> 反码 --> 符号位不动, 反码+1

	// -1 <int8>
	// 0000 0001
	// 1111 1110
	// 1111 1111

	// 1 + (-1) = 0  // 中和
	// 0000 0001     // 原码
	//     +
	// 1111 1111     // 补码
	// 0000 0000
	// 1 + x = 0

	// 按位与： 2个位 都为1 时，为1
	// 1 <int8>  a=1, b=-1
	// 0000 0001    // 0
	//     &
	// 1111 1111   // 1
	// 0000 0001   // 0000 00001

	// 按位或:   2各位 有一个为1，则为1
	// 1 <int8> a=1, b= -1
	// 0000 0001    // 0
	//     |
	// 1111 1111   // 1
	// 1111 1111

	// 异或：相异为真, 00 11 假(0), 10 01 真(1)
	// 1 <int8>  a=1, b=-1
	// 0000 0001    // 0
	//     &
	// 1111 1111   // 1
	// 1111 1110

	// 取反: 按位取反
	// 1 <int8> ...   !1
	// 0000 0001    // 0
	//     !
	// 1111 1110

	// 位掩码
	// 1100 0011   取出后4位
	//     &
	// 0000 1111   // 掩码
	// 0000 0011   // 后4位

	// 取第二位(高位)
	// 0100 0000
}
